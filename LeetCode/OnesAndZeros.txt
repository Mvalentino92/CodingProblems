class Solution 
{
    public int[] count(String s)
    {
        int[] retval = new int[2];
        for(int i = 0; i < s.length(); i++)
        {
            if(s.charAt(i) == '0') retval[0] = retval[0] + 1;
            else retval[1] = retval[1] + 1;
        }
        return retval;
    }
    
    public int findMaxForm(String[] strs, int m, int n) 
    {
        int[][] matrix = new int[strs.length + 1][(m+1)*(n+1)];
        int[] vals = new int[2];
        for(int i = 1; i < matrix.length; i++)
        {
            for(int j = 0; j <= m; j++)
            {
                for(int k = 0; k <= n; k++)
                {
                    int colDex = (n+1)*j + k;
                    String s = strs[i-1];
                    vals = count(s);
                    if(j < vals[0] || k < vals[1]) matrix[i][colDex] = matrix[i-1][colDex];
                    else matrix[i][colDex] = Math.max(matrix[i-1][colDex],matrix[i-1][(n+1)*(j-vals[0]) + (k-vals[1])] + 1);
                }
            }
        }
        return matrix[strs.length][(m+1)*(n+1)-1];
    }
}
