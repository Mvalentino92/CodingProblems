import java.util.*;
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        //Retval ArrayList
        ArrayList<Integer> retval = new ArrayList<>();
        if(s.length() == 0 || words.length == 0) return retval;
        
        //Create an array to track matches
        int[] matches = new int[words.length];
        
        //Create hits, and wordLength
        int hits = 0;
        int wordLength = words[0].length();
        
        //Begin to iterate the String, only up until the length you could get matches
        for(int i = 0; i <= s.length() - words.length * wordLength; i++)
        {
            hits = 0;
            int j = 0;
            while(j != words.length)
            {
                for(j = 0; j < words.length; j++)
                {
                    if(matches[j] != -1 && s.substring(i + hits*wordLength, i + (hits+1)*wordLength).equals(words[j]))
                    {
                        hits++;
                        matches[j] = -1;
                        break;
                    }
                }
            }
            if(hits == words.length) retval.add(i);
            for(int k = 0; k < matches.length; k++) matches[k] = 0;
        }
        return retval;
    }
}
