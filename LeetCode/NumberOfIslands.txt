class Solution 
{
    public void upAndDown(char[][] grid, int row, int col)
    {
        for(int i = row + 1; i < grid.length; i++)
        {
            if(grid[i][col] == '0') break;
            else
            {
                grid[i][col] = '0';
                rightAndLeft(grid,i,col);
            }
        }
        
        for(int i = row - 1; i > -1; i--)
        {
            if(grid[i][col] == '0') break;
            else
            {
                grid[i][col] = '0';
                rightAndLeft(grid,i,col);
            }
        }
    }
    
    public void rightAndLeft(char[][] grid, int row, int col)
    {
        for(int j = col + 1; j < grid[row].length; j++)
        {
            if(grid[row][j] == '0') break;
            else
            {
                grid[row][j] = '0';
                upAndDown(grid,row,j);
            }
        }
        
        for(int j = col - 1; j > -1; j--)
        {
            if(grid[row][j] == '0') break;
            else
            {
                grid[row][j] = '0';
                upAndDown(grid,row,j);
            }
        }
    }
    
    public void sinkIsland(char[][] grid, int row, int col)
    {
        upAndDown(grid,row,col);
        rightAndLeft(grid,row,col);
    }
    
    public int numIslands(char[][] grid) 
    {
        int count = 0;
        for(int i = 0; i < grid.length; i++)
        {
            for(int j = 0; j < grid[i].length; j++)
            {
                if(grid[i][j] == '1') 
                {
                    count++;
                    grid[i][j] = '0';
                    sinkIsland(grid,i,j);
                }
            }
        }
        return count;
    }
}
