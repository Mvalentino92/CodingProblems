class Solution
{
    public int countDigitOne(int n) 
    {
        //Base cases
        if(n <= 0) return 0;
        if(n < 10) return 1;
        
        //Get the digits of the number in order
        int[] digits = new int[15];
        int d = 15;
        while(n > 0)
        {
            digits[--d] = n % 10;
            n /= 10;
        }
        
        //Create the arr of solutions
        int dlen = digits.length - d;
        int[] arr = new int[dlen];
        arr[0] = 1;
        for(int i = 1; i < dlen; i++) arr[i] = 10*arr[i-1] + (int)Math.pow(10,i);
        
        //Begin to find solution
        int sol = 0;
        for(int i = d; i < digits.length - 1; i++)
        {
            if(digits[i] == 0) continue;
            if(digits[i] == 1)
            {
                int toAdd = digits[i+1];
                for(int j = i+2; j < digits.length; j++) 
                    toAdd= toAdd*10 + digits[j];
                sol += toAdd + 1;
                sol += digits[i]*arr[dlen-i+d-2];
            }
            else sol += digits[i]*arr[dlen-i+d-2] + (int)Math.pow(10,dlen-i+d-1);
        }
        if(digits[14] >= 1) sol++;
        return sol;
    } 
}
