import java.util.TreeMap;
class Jump
{
    int odd = 1;
    int even = 1;
    public Jump(){};
}

class Solution 
{
    public int oddEvenJumps(int[] A)  
    {   

        //Initialize TreeMap with first element
        TreeMap<Integer,Jump> tree = new TreeMap<>();
        tree.put(A[A.length-1],new Jump());
        int retval = 1;
    
        //Begin to iterate and find solution
        for(int i = A.length - 2; i > -1; i--)
        {
                //Find the ceil and floor element
                Jump jump = new Jump();
                Integer ceil = tree.ceilingKey(A[i]);
                Integer floor = tree.floorKey(A[i]);
                jump.odd = (ceil != null && ceil >= A[i]) ? tree.get(ceil).even : 0;
                jump.even = (floor != null && floor <= A[i]) ? tree.get(floor).odd : 0;

                //Update retval and add this element
                retval += jump.odd;
                tree.put(A[i],jump);
        }
        return retval;
    }   
}
