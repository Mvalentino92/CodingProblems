import java.util.Scanner;
public class Solution
{
	public static void main(String[] args)
	{
		solve();
	}
 
	static void solve()
	{
		long total = 0;
		Scanner input = new Scanner(System.in);
		int n = input.nextInt();
		int[] arr = new int[n];
		int[] greaterThan = new int[n];
 
		boolean isAscending = true;
		boolean isDescending = true;
		arr[0] = input.nextInt();
		for(int i = 1; i < n; i++) 
		{
			arr[i] = input.nextInt();
			isAscending = arr[i-1] > arr[i] ? false : isAscending;
			isDescending = arr[i-1] < arr[i] ? false : isDescending;
		}
	
		if(isAscending)
		{
			System.out.println(0);
			return;
		}
		if(isDescending)
		{
			long N = (long)n;
			System.out.println(N*(N-1)*(N-2)/6);
			return;
		}
		
		TreeNode front = new TreeNode(arr[0]);
		for(int i = 1; i < n; i++)
		{
			greaterThan[i] = addGT(front,arr[i]);
		}
 
		TreeNode back = new TreeNode(arr[n-1]);
		for(int i = n - 2; i > -1; i--)
		{
			total += (long)greaterThan[i]*(long)addLT(back,arr[i]);
		}
 
		System.out.println(total);
	}
 
	static class TreeNode
	{
		int val;
		int size = 1;
		TreeNode left;
		TreeNode right;
	
		public TreeNode(int val) {this.val = val;}
	}
 
	//Adds the node and returns all nodes less than this node in the tree.
	static int addLT(TreeNode root, int val)
	{
		int retval = 0;
		while(true)
		{
			root.size++;
			if(val < root.val)
			{
				if(root.left == null)
				{
					root.left = new TreeNode(val);
					break;
				}
				else root = root.left;
			}
			else
			{
				retval += 1 + (root.left != null ? root.left.size : 0);
				if(root.right == null)
				{
					root.right = new TreeNode(val);
					break;
				}
				else root = root.right;
			}
		}
		return retval;
	}
 
	//Adds the node and returns all nodes greater than this node in the tree.
	static int addGT(TreeNode root, int val)
	{
		int retval = 0;
		while(true)
		{
			root.size++;
			if(val < root.val)
			{
				retval += 1 + (root.right != null ? root.right.size : 0);
				if(root.left == null)
				{
					root.left = new TreeNode(val);
					break;
				}
				else root = root.left;
			}
			else
			{
				if(root.right == null)
				{
					root.right = new TreeNode(val);
					break;
				}
				else root = root.right;
			}
		}
		return retval;
	}
}
